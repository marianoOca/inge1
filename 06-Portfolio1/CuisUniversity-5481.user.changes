

----QUIT----(11 September 2022 19:10:09) CuisUniversity-5481.image priorSource: 2810882!

----STARTUP---- (11 September 2022 19:10:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5481.image!


----QUIT----(11 September 2022 19:10:10) CuisUniversity-5481.image priorSource: 7059465!

----STARTUP---- (6 October 2022 20:27:19) as /home/clinux01/Escritorio/CUIS/CuisUniversity-5481.image!


----End fileIn of /home/clinux01/Escritorio/Portfolio-Ejercicio.st----!

----STARTUP---- (6 October 2022 20:28:36) as /home/clinux01/Escritorio/CUIS/CuisUniversity-5481.image!


----End fileIn of /home/clinux01/Escritorio/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 20:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:29:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 20:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MO 10/6/2022 20:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MO 10/6/2022 20:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 20:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:29:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 20:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:30:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:30:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:30:09'!
FAILURE!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:37:25' prior: 50552383!
register: aValue on: account

	self subclassResponsibility! !
!Deposit class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:37:44' overrides: 50552544!
register: aValue on: account
	
	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:38:25'!
for: aValue

	self subclassResponsibility! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:38:59' prior: 50552558!
for: aValue

	^ self new initializeFor: aValue! !

!methodRemoval: Deposit class #for: stamp: 'MO 10/6/2022 20:39:06'!
for: aValue

	^ self new initializeFor: aValue !
!Withdraw class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:39:40' overrides: 50552544!
register: aValue on: account
	
	| transaction |
	
	transaction := self for: aValue*(-1).
	account register: transaction.
		
	^ transaction! !

!methodRemoval: Withdraw class #for: stamp: 'MO 10/6/2022 20:39:47'!
for: aValue

	^ self new initializeFor: aValue !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 20:39:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:39:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:40:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 20:40:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 20:40:09'!
FAILURE!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'MO 10/6/2022 20:41:45'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'MO 10/6/2022 20:41:45'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'MO 10/6/2022 20:41:45'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'initialization' stamp: 'MO 10/6/2022 20:41:55'!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: Deposit #initializeFor: stamp: 'MO 10/6/2022 20:41:55'!
initializeFor: aValue

	value := aValue !
!AccountTransaction methodsFor: 'initialization' stamp: 'MO 10/6/2022 20:42:04' prior: 50552624!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: Withdraw #initializeFor: stamp: 'MO 10/6/2022 20:42:04'!
initializeFor: aValue

	value := aValue !
!AccountTransaction methodsFor: 'value' stamp: 'MO 10/6/2022 20:43:30' prior: 50552370 overrides: 16902254!
value

	^ value! !

!methodRemoval: Withdraw #value stamp: 'MO 10/6/2022 20:43:30'!
value

	^ value!
!AccountTransaction methodsFor: 'value' stamp: 'MO 10/6/2022 20:43:38' prior: 50552641 overrides: 16902254!
value

	^ value! !

!methodRemoval: Deposit #value stamp: 'MO 10/6/2022 20:43:38'!
value

	^ value!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 20:45:59' prior: 50552485!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: aTransaction value ifFalse: aTransaction value * (-1) ] ifEmpty: [ 0 ]! !
!Withdraw class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:46:15' prior: 50552572 overrides: 50552544!
register: aValue on: account
	
	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 20:46:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:46:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:46:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 20:46:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MO 10/6/2022 20:46:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MO 10/6/2022 20:46:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 20:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 20:46:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 20:46:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:46:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:46:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 20:46:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MO 10/6/2022 20:46:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MO 10/6/2022 20:46:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 20:46:37'!
PASSED!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:47:16' prior: 50552544!
register: aValue on: account
	
	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!methodRemoval: Deposit class #register:on: stamp: 'MO 10/6/2022 20:47:16'!
register: aValue on: account
	
	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'MO 10/6/2022 20:47:26' prior: 50552727!
register: aValue on: account
	
	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!methodRemoval: Withdraw class #register:on: stamp: 'MO 10/6/2022 20:47:26'!
register: aValue on: account
	
	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 20:47:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:47:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:47:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 20:47:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MO 10/6/2022 20:47:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MO 10/6/2022 20:47:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 20:47:33'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 20:51:18' prior: 50552654!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: aTransaction value ifFalse: (-1)*(aTransaction value) ] ifEmpty: [ 0 ]! !
!Deposit methodsFor: 'value' stamp: 'MO 10/6/2022 20:52:24'!
impactOnBalance

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'MO 10/6/2022 20:52:46'!
impactOnBalance

	^ (-1)*value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 20:53:17' prior: 50552782!
balance

	^transactions sum: [ :aTransaction | aTransaction impactOnBalance ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 20:53:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:53:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 20:53:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 20:53:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MO 10/6/2022 20:53:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MO 10/6/2022 20:53:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 20:53:20'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'MO 10/6/2022 21:03:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MO 10/6/2022 21:03:46'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'MO 10/6/2022 21:04:55'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:05:11'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:05:11'!
ERROR!
!Portfolio methodsFor: 'xxxxxxx' stamp: 'MO 10/6/2022 21:05:25'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'xxxxxxx' stamp: 'MO 10/6/2022 21:05:39' prior: 50552866!
balance
	
	^ 0! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:05:44'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:10:36'!
test02PortfolioWithOneAccountEqualsItsBalance 

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	portfolio add: account.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:11:03' prior: 50552877!
test02PortfolioWithOneAccountEqualsItsBalance 

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	portfolio add: account.
	Deposit register: 100 on: account.
		
	self assert: account balance equals: portfolio balance.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:11:19'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'MO 10/6/2022 21:12:12' overrides: 16920235!
initialize

	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'MO 10/6/2022 21:13:14' prior: 50552870!
balance
	
	^ accounts sum: [ :aAccount | aAccount balance ] ifEmpty: [ 0 ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:13:24'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'MO 10/6/2022 21:15:46'!
add: anAccount
	
	accounts add: anAccount! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:16:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:16:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:16:20'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 21:24:37' prior: 50552796!
balance

	| balance |
	
	balance := 0.

	transactions do: [ :aTransaction | balance := aTransaction applyToBalance: balance ].

	"transactions sum: [ :aTransaction | aTransaction impactOnBalance ] ifEmpty: [ 0 ]."
	
	^balance! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:24:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:24:42'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:24:42'!
ERROR!
!Deposit methodsFor: 'value' stamp: 'MO 10/6/2022 21:24:51'!
applyToBalance: aSmallInteger 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'value' stamp: 'MO 10/6/2022 21:25:23' prior: 50552951!
applyToBalance: aBalance

	^ aBalance + value! !
!Withdraw methodsFor: 'value' stamp: 'MO 10/6/2022 21:25:42'!
applyToBalance: aBalance

	^ aBalance - value! !

!methodRemoval: Deposit #impactOnBalance stamp: 'MO 10/6/2022 21:26:02'!
impactOnBalance

	^ value!

!methodRemoval: Withdraw #impactOnBalance stamp: 'MO 10/6/2022 21:26:06'!
impactOnBalance

	^ (-1)*value!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 21:30:08' prior: 50552931!
balance

	| balance |
	
	balance := 0.
	
	^ transactions inject: 0 into: [ :aTransaction | aTransaction applyToBalance: balance ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:30:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:30:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:30:16'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 21:30:43' prior: 50552971!
balance

	| balance |
	
	balance := 0.
	
	^ transactions inject: balance into: [ :aTransaction | aTransaction applyToBalance: balance ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:30:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:30:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 21:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MO 10/6/2022 21:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MO 10/6/2022 21:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 21:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:31:02'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:31:02'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 21:32:41' prior: 50552990!
balance

	
	^ transactions inject: 0 into: [ :balance :aTransaction | aTransaction applyToBalance: balance ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MO 10/6/2022 21:32:43' prior: 50553035!
balance
	
	^ transactions inject: 0 into: [ :balance :aTransaction | aTransaction applyToBalance: balance ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:32:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:32:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MO 10/6/2022 21:32:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MO 10/6/2022 21:32:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MO 10/6/2022 21:32:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MO 10/6/2022 21:32:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MO 10/6/2022 21:32:46'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:36:13'!
test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	portfolio add: account.
	Deposit register: 100 on: account.
		
	self assert: account balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:38:29' prior: 50553074!
test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances

	| portfolio account1 account2 account3|
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	account3 := ReceptiveAccount  new.
	
	portfolio add: account1; add: account2; add: account3.
	Deposit register: 100 on: account1.
	Deposit register: 2 on: account2.
	Deposit register: 1020 on: account3.
		
	self assert: 1122 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'MO 10/6/2022 21:38:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:38:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:38:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'MO 10/6/2022 21:38:30'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:39:36'!
test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative

	| portfolio account1 account2 account3|
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	account3 := ReceptiveAccount  new.
	
	portfolio add: account1; add: account2; add: account3.
	Withdraw register: 100 on: account1.
	Withdraw register: 20 on: account2.
	Deposit register: 1120 on: account3.
		
	self assert: 1000 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'MO 10/6/2022 21:39:37'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:39:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:39:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'MO 10/6/2022 21:39:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'MO 10/6/2022 21:39:37'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:43:47'!
test05PortfolioWithPortfolioGivesCorrectBalance

	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	
	portfolio2 add: account1; add: account2.
	portfolio1 add: portfolio2.
	Deposit register: 100 on: account1.
	Deposit register: 20 on: account2.
		
	self assert: 120 equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:43:48'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:43:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:43:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'MO 10/6/2022 21:43:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'MO 10/6/2022 21:43:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:43:48'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:47:05'!
test06PortfolioWithVariousPortfolioGivesCorrectBalance

	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	account3 := ReceptiveAccount  new.
	
	portfolio2 add: account1; add: account2.
	portfolio3 add: account3.
	portfolio1 add: portfolio2; add: portfolio3; add: portfolio4.
	Deposit register: 100 on: account1.
	Deposit register: 20 on: account2.
	Deposit register: 30 on: account3.
		
	self assert: 150 equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:47:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:47:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:47:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'MO 10/6/2022 21:47:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'MO 10/6/2022 21:47:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:47:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:47:08'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:48:33'!
test07PortfolioWithPortfolioAndAccountGivesCorrectBalance

	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	account3 := ReceptiveAccount  new.
	
	portfolio2 add: account1; add: account2.
	portfolio1 add: portfolio2; add: account3.
	Deposit register: 100 on: account1.
	Deposit register: 20 on: account2.
	Deposit register: 30 on: account3.
		
	self assert: 150 equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'MO 10/6/2022 21:48:34'!
PASSED!

----SNAPSHOT----(6 October 2022 21:51:19) CuisUniversity-5481.image priorSource: 7059698!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:52:41'!
test08PortfoliosShouldNotMakeCIcles

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio1.! !

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCIcles stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'MO 10/6/2022 21:52:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCIcles stamp: 'MO 10/6/2022 21:52:43'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:53:06' prior: 50553298!
test08PortfoliosShouldNotMakeCIcles

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio1.
	
	self assert: 0 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:58:21' prior: 50553340!
test08PortfoliosShouldNotMakeCIcles

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1] raise: Error withMessageText: 'no podes hacer eso maquina'  ! !
!PortfolioTest methodsFor: 'test' stamp: 'MO 10/6/2022 21:58:31'!
test08PortfoliosShouldNotMakeCicles

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1] raise: Error withMessageText: 'no podes hacer eso maquina'  ! !

!methodRemoval: PortfolioTest #test08PortfoliosShouldNotMakeCIcles stamp: 'MO 10/6/2022 21:58:34'!
test08PortfoliosShouldNotMakeCIcles

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1] raise: Error withMessageText: 'no podes hacer eso maquina'  !

----QUIT----(6 October 2022 21:58:55) CuisUniversity-5481.image priorSource: 7092619!

----STARTUP---- (13 October 2022 17:09:48) as /home/clinux01/Descargas/linux64/CuisUniversity-5481.image!


----End fileIn of /home/clinux01/Descargas/linux64/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 17:43:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 17:43:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 17:43:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 17:43:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 17:43:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 17:43:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 17:43:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 17:43:46'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 17:43:46'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 17:43:55'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 17:43:55'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 17:43:59'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 17:43:59'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 17:44:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 17:44:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 17:44:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 17:44:19'!
PASSED!

Object subclass: #FinancialService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialService category: 'Portfolio-Ejercicio' stamp: 'cde 10/13/2022 21:11:33'!
Object subclass: #FinancialService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'cde 10/13/2022 21:11:45'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'cde 10/13/2022 21:11:52'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'cde 10/13/2022 21:11:57'!
FinancialService subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialService methodsFor: 'nil' stamp: 'cde 10/13/2022 21:12:27'!
balance

	self subclassResponsibility ! !
!FinancialService methodsFor: 'as yet unclassified' stamp: 'cde 10/13/2022 21:12:41'!
transactions

	self subclassResponsibility ! !
!FinancialService methodsFor: 'as yet unclassified' stamp: 'cde 10/13/2022 21:12:46' overrides: 16920235!
initialize

	self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'cde 10/13/2022 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'cde 10/13/2022 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'cde 10/13/2022 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'cde 10/13/2022 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'cde 10/13/2022 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'cde 10/13/2022 21:13:22'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:13:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:13:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:13:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 21:13:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:13:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:13:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 21:13:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:13:25'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:13:25'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'cde 10/13/2022 21:21:39'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'cde 10/13/2022 21:21:39' prior: 50552587!
add: anAccount
	
	financialServices add: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'cde 10/13/2022 21:21:39' prior: 50552583 overrides: 50552755!
initialize

	financialServices := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'cde 10/13/2022 21:21:39' prior: 50552577 overrides: 50552746!
balance
	
	^ financialServices sum: [ :aAccount | aAccount balance ] ifEmpty: [ 0 ]! !

FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'cde 10/13/2022 21:22:02'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:22:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:22:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:22:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 21:22:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:22:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:22:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 21:22:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:22:04'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:22:04'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 21:22:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:22:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:22:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 21:22:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:22:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:22:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:22:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:22:27'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:22:27'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'cde 10/13/2022 21:25:02' prior: 50552841 overrides: 50552746!
balance
	
	^ financialServices sum: [ :aService | aService balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'balance' stamp: 'cde 10/13/2022 21:26:32' prior: 50552928 overrides: 50552746!
balance
	
	"^ financialServices sum: [ :aService | aService balance ] ifEmpty: [ 0 ]."
	^ financialServices inject: 0 into: [ :balance :aService | aService balance ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:26:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:26:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:26:34'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 21:26:34'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:26:34'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:26:34'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 21:26:34'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:26:34'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:26:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:26:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:26:42'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:26:42'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'cde 10/13/2022 21:28:16' prior: 50552934 overrides: 50552746!
balance
	
	"^ financialServices sum: [ :aService | aService balance ] ifEmpty: [ 0 ]."
	^ financialServices inject: 0 into: [ :balance :aService | aService balance ].! !
!Portfolio methodsFor: 'balance' stamp: 'cde 10/13/2022 21:28:39' prior: 50552989 overrides: 50552746!
balance
	
	"^ financialServices sum: [ :aService | aService balance ] ifEmpty: [ 0 ]."
	^ financialServices inject: 0 into: [ :balance :aService | balance + (aService balance) ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:28:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:28:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:28:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 21:28:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:28:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:28:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 21:28:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:28:41'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:28:41'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 21:28:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:28:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:28:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 21:28:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:28:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:28:52'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'cde 10/13/2022 21:28:59' prior: 50552998 overrides: 50552746!
balance
	
	^ financialServices inject: 0 into: [ :balance :aService | balance + (aService balance) ].! !
!FinancialService methodsFor: 'nil' stamp: 'cde 10/13/2022 21:38:25'!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!methodRemoval: FinancialService #initialize stamp: 'cde 10/13/2022 21:38:38'!
initialize

	self subclassResponsibility !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'cde 10/13/2022 21:38:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'cde 10/13/2022 21:38:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'cde 10/13/2022 21:38:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'cde 10/13/2022 21:38:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:38:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'cde 10/13/2022 21:38:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'cde 10/13/2022 21:38:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:38:43'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'cde 10/13/2022 21:38:43'!
FAILURE!

----SNAPSHOT----(13 October 2022 22:01:09) CuisUniversity-5481.image priorSource: 7059698!

----STARTUP---- (15 October 2022 11:37:20) as D:\Carreras\Ciencias de la Computacion\Tercero\Ingenieria de Software 1\CuisUniversity\windows64\CuisUniversity-5481.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 11:37:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SR 10/15/2022 11:37:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SR 10/15/2022 11:37:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SR 10/15/2022 11:37:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SR 10/15/2022 11:37:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SR 10/15/2022 11:37:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SR 10/15/2022 11:37:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 11:37:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 11:37:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 11:37:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 11:37:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 11:37:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 11:37:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 11:37:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'SR 10/15/2022 11:37:38'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'SR 10/15/2022 11:37:38'!
FAILURE!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 11:37:50' prior: 50552395!
test08PortfoliosShouldNotMakeCicles

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	"self should: [portfolio2 add: portfolio1] raise: Error withMessageText: 'no podes hacer eso maquina'  "! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'SR 10/15/2022 11:37:53'!
PASSED!

!methodRemoval: PortfolioTest #test08PortfoliosShouldNotMakeCicles stamp: 'SR 10/15/2022 12:33:04'!
test08PortfoliosShouldNotMakeCicles

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	"self should: [portfolio2 add: portfolio1] raise: Error withMessageText: 'no podes hacer eso maquina'  "!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 12:36:08'!
test08PortfoliosCantHaveAnAccountMoreThanOnce

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 12:36:11'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 12:36:11'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 12:36:27' prior: 50552829!
add: aFinancialService
	
	financialServices add: aFinancialService! !
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 12:54:43' prior: 50553235!
test08PortfoliosCantHaveAnAccountMoreThanOnce

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.! !

portfolio := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio add: account.!

portfolio add: account.!

portfolio balance.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 14:14:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SR 10/15/2022 14:14:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SR 10/15/2022 14:14:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SR 10/15/2022 14:14:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SR 10/15/2022 14:14:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SR 10/15/2022 14:14:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SR 10/15/2022 14:14:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 14:14:43'!
FAILURE!

!testRun: #PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 14:14:44'!
FAILURE!

----End fileIn of D:\Carreras\Ciencias de la Computacion\Tercero\Ingenieria de Software 1\CuisUniversity\windows64\Packages\TerseGuide.pck.st----!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 14:18:28' prior: 50553254!
add: aFinancialService
	
	(financialServices includes: aFinancialService) ifTrue: [ ^self ].
	financialServices add: aFinancialService! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 14:30:01' prior: 50556259!
add: aFinancialService
	
	(financialServices includes: aFinancialService) ifTrue: [ ^self ].
	financialServices add: aFinancialService! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 14:30:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 14:30:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 14:30:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 14:30:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:30:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:30:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 14:30:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 14:30:09'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 14:30:48' prior: 50556266!
add: aFinancialService
	
	(financialServices includes: aFinancialService) not ifTrue: [ financialServices add: aFinancialService ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 14:30:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 14:30:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 14:30:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 14:30:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:30:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:30:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 14:30:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 14:30:51'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 14:33:02'!
test09

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	portfolio1 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 14:33:54'!
test09APortfolioWithAnAccountCantHaveAPortfolioWithTheSameAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	portfolio1 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !

!methodRemoval: PortfolioTest #test09 stamp: 'SR 10/15/2022 14:33:55'!
test09

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	portfolio1 add: account.
		
	self assert: 100 equals: portfolio1 balance.!

!testRun: #PortfolioTest #test09APortfolioWithAnAccountCantHaveAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 14:34:00'!
FAILURE!

!testRun: #PortfolioTest #test09APortfolioWithAnAccountCantHaveAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 14:34:00'!
FAILURE!

!testRun: #PortfolioTest #test09APortfolioWithAnAccountCantHaveAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 14:45:05'!
FAILURE!

!testRun: #PortfolioTest #test09APortfolioWithAnAccountCantHaveAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 14:45:05'!
FAILURE!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 14:46:11'!
test08CantAddAnAccountToAPortfolioWithTheSameAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test08PortfoliosCantHaveAnAccountMoreThanOnce stamp: 'SR 10/15/2022 14:46:13'!
test08PortfoliosCantHaveAnAccountMoreThanOnce

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 14:57:33'!
test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	portfolio1 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !

!methodRemoval: PortfolioTest #test09APortfolioWithAnAccountCantHaveAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 14:57:36'!
test09APortfolioWithAnAccountCantHaveAPortfolioWithTheSameAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	portfolio1 add: account.
		
	self assert: 100 equals: portfolio1 balance.!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 14:57:55'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 14:57:55'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 14:57:55'!
FAILURE!
!FinancialService methodsFor: 'nil' stamp: 'SR 10/15/2022 15:00:34'!
hasAccount

	self subclassResponsibility ! !

!methodRemoval: FinancialService #hasAccount stamp: 'SR 10/15/2022 15:01:02'!
hasAccount

	self subclassResponsibility !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 16:34:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 16:34:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 16:34:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 16:34:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 16:34:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 16:34:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 16:34:18'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 16:34:18'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 16:34:18'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 16:34:18'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 16:38:16'!
canAdd: aFinancialService
	
	| response |
	
	response := false.
	
	financialServices do: [ :aService |
		(aService isKindOf: self) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ aService = aFinancialService ].
		].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 16:38:38' prior: 50556540!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		(aService isKindOf: self) ifTrue: [ response := (aService canAdd: aFinancialService) ] ifFalse: [ response := (aService = aFinancialService) ].
		].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 16:38:44' prior: 50556550!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		(aService isKindOf: self) ifTrue: [ response := (aService canAdd: aFinancialService) ] ifFalse: [ response := (aService = aFinancialService) ].
		].
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 16:55:07' prior: 50556561!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		(aService isKindOf: self) ifTrue: [ response := response and: [aService canAdd: aFinancialService] ] ifFalse: [ response := (aService = aFinancialService) ].
		].
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 16:56:57' prior: 50556572!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ aService = aFinancialService ]
			].
		].
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 17:03:48'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 17:03:48'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 17:03:48'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 17:04:31' prior: 50556584!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ]
			].
		].
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 17:09:09' prior: 50556635!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
			].
		].
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 17:09:56' prior: 50556308!
add: aFinancialService
	
	"(financialServices includes: aFinancialService) not ifTrue: [ financialServices add: aFinancialService ]."
	(self canAdd: aFinancialService) ifTrue: [ self add: aFinancialService ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 17:09:59'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 17:11:38'!
PASSED!

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio := Portfolio new.!

account := ReceptiveAccount new.!

portfolio add: account.!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 18:12:30'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 18:12:56' prior: 50556659!
add: aFinancialService
	
	"(financialServices includes: aFinancialService) not ifTrue: [ financialServices add: aFinancialService ]."
	(self canAdd: aFinancialService) ifTrue: [ financialServices add: aFinancialService ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 18:12:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 18:12:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 18:12:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 18:12:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 18:12:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 18:12:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 18:12:58'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 18:12:58'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 18:12:58'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 18:12:58'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 18:13:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 18:13:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 18:13:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 18:13:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 18:13:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 18:13:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 18:13:09'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 18:13:10'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 18:13:11'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 18:13:11'!
FAILURE!

portfolio := Portfolio new.!

account := ReceptiveAccount new.!

portfolio add: account.!

portfolio balance.!

Deposit register: 100 on: account.!

portfolio balance.!

account2 := ReceptiveAccount new.!

portfolio add: account.!

portfolio balance.!

portfolio2 := Portfolio new.!

portfolio2 add: account.!

portfolio2 balance. !

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio2 add: account.!

portfolio1 add: portfolio2.!

portfolio1 add: account.!

portfolio1 balance.!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 18:38:05' prior: 50556647!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
			].
		].
	
	^response! !

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 19:35:38'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 19:35:40'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 19:35:40'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 19:42:31' prior: 50556793!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
			].
		].
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 19:43:21' prior: 50556817!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
			].
		].
	
	^response! !

portfolio1 balance.!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 20:09:04' prior: 50556830!
canAdd: aFinancialService
	
	| response |
	
	response := true.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self class) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
			].
		].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 20:09:06'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 20:09:09'!
PASSED!

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio2 add: account.!

portfolio1 add: portfolio2.!

portfolio1 add: account.!

portfolio1 balance.!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 20:10:38'!
test10CantAddAPortfolioToItself

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	portfolio add: portfolio.
		
	self assert: 100 equals: portfolio balance.! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 20:11:05' prior: 50556843!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self class) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
			].
		].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 20:11:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 20:11:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 20:11:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 20:11:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/15/2022 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/15/2022 20:12:09'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 20:15:54'!
test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
		
	self assert: 100 equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 20:16:06'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 20:16:06'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 20:31:08' prior: 50556912!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
		
		] ifFalse: [
		
		].
	
	financialServices do: [ :aService |
		response := response and: [
			(aService isKindOf: self class) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
			].
		].
	
	^response! !
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/15/2022 22:34:24'!
test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	portfolio1 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !

!methodRemoval: PortfolioTest #test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount stamp: 'SR 10/15/2022 22:34:24'!
test09CantAddAnAccountToAPortfolioWithAPortfolioWithThatAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	portfolio1 add: account.
		
	self assert: 100 equals: portfolio1 balance.!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/15/2022 22:34:45'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/15/2022 22:34:47'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 22:34:49'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 22:34:49'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 23:41:44' prior: 50556687!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [ financialServices add: aFinancialService ].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 23:43:58' prior: 50556989!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: self class) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 23:44:03' prior: 50557057!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: self class) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/15/2022 23:45:19'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 23:45:19'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 23:45:19'!
FAILURE!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/15/2022 23:45:23'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 23:45:24'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 23:45:24'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/15/2022 23:45:45' prior: 50557073!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/15/2022 23:45:47'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 23:45:47'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/15/2022 23:45:47'!
FAILURE!

----SNAPSHOT----(16 October 2022 01:21:40) CuisUniversity-5481.image priorSource: 7086805!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 01:23:59' prior: 50557147!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 01:25:17' prior: 50557212!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 01:25:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 01:25:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 01:25:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 01:25:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 01:25:20'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 01:25:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 01:25:20'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/16/2022 01:25:20'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 01:25:20'!
ERROR!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 01:25:21'!
ERROR!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 01:25:21'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'SR 10/16/2022 01:25:48'!
financialServices

	^financialServices ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 01:25:51'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 01:25:54'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 01:26:25' prior: 50557229!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	^response! !

----SNAPSHOT----(16 October 2022 01:26:53) CuisUniversity-5481.image priorSource: 7217857!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/16/2022 01:28:18'!
test08CantAddAnAccountToAPortfolioThatHasThatAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test08CantAddAnAccountToAPortfolioWithTheSameAccount stamp: 'SR 10/16/2022 01:28:18'!
test08CantAddAnAccountToAPortfolioWithTheSameAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	
	portfolio add: account.
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.!

portfolio3 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio1 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio2 add: portfolio3.!

portfolio3 add: account.!

portfolio1 balance.!

portfolio1 add: portfolio2.!

portfolio1 balance.!

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio2 add: portfolio3.!

portfolio3 add: account.!

portfolio2 add: portfolio1.!

portfolio2 balance.!

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio2 add: portfolio3.!

portfolio3 add: account.!

portfolio2 balance.!

portfolio2 add: portfolio1.!

portfolio2 balance.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 01:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SR 10/16/2022 01:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SR 10/16/2022 01:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SR 10/16/2022 01:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SR 10/16/2022 01:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SR 10/16/2022 01:33:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SR 10/16/2022 01:33:52'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 01:33:54'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 01:33:54'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/16/2022 01:36:33'!
test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	portfolio2 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 01:36:36'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 01:36:36'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 02:36:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 02:36:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 02:36:34'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:36:34'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:36:34'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:37:25' prior: 50557050!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [ financialServices add: aFinancialService ].! !

FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'SR 10/16/2022 02:37:36'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'SR 10/16/2022 02:37:50'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'SR 10/16/2022 02:38:03' prior: 50552835 overrides: 16920235!
initialize

	financialServices := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:40:20' prior: 50557560!
add: aFinancialService
	
	(parents isEmpty not) ifTrue: [
			
		] ifFalse: [
			(self canAdd: aFinancialService) ifTrue: [ financialServices add: aFinancialService ].
		].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:43:01' prior: 50557601!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [ financialServices add: aFinancialService ].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:45:46' prior: 50557341!
canAdd: aFinancialService
	
	| response |
	
	(parents isEmpty not) ifTrue: [
			
		] ifFalse: [
			response := (self = aFinancialService) not.
	
			"probar double dispatch"
			(aFinancialService isKindOf: Portfolio) ifTrue: [
					aFinancialService financialServices do: [ :aService |
						response := response and: [ self canAdd: aService ].
						].
				] ifFalse: [
					financialServices do: [ :aService |
					response := response and: [
						(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
						].
					].
				].
		].

	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 02:46:14'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:46:15'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:46:15'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:47:27' prior: 50557609!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [
			financialServices add: aFinancialService.
			(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
		].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:47:47'!
addParent: aPortfolio

	parents add: aPortfolio.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 02:47:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 02:47:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 02:47:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 02:47:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:47:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:47:51'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 02:47:51'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 02:47:51'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:47:51'!
ERROR!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 02:47:52'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 02:47:52'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 02:47:52'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 02:48:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 02:48:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 02:48:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 02:48:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:48:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:48:07'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 02:48:07'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:53:13' prior: 50557616!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(parents isEmpty not) ifTrue: [
			
		] ifFalse: [
			"probar double dispatch"
			(aFinancialService isKindOf: Portfolio) ifTrue: [
					aFinancialService financialServices do: [ :aService |
						response := response and: [ self canAdd: aService ].
						].
				] ifFalse: [
					financialServices do: [ :aService |
					response := response and: [
						(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
						].
					].
				].
		].

	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 02:54:05' prior: 50557776!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	(parents isEmpty not) ifTrue: [
			parents do: [ :aPortfolio | response := response and: [ aPortfolio canAdd: aFinancialService ] ].
		] ifFalse: [
			"probar double dispatch"
			(aFinancialService isKindOf: Portfolio) ifTrue: [
					aFinancialService financialServices do: [ :aService |
						response := response and: [ self canAdd: aService ].
						].
				] ifFalse: [
					financialServices do: [ :aService |
					response := response and: [
						(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
						].
					].
				].
		].

	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 03:10:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 03:10:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 03:10:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 03:10:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:10:02'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:11:07' prior: 50557798!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].

	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 03:11:09'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:11:09'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:11:10'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:11:13'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:11:13'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:13:15' prior: 50557689!
add: aFinancialService
	
	| rootParents |
	
	rootParents := OrderedCollection new.
	
	
	
	(self canAdd: aFinancialService) ifTrue: [
			financialServices add: aFinancialService.
			(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
		].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:18:53' prior: 50557922!
add: aFinancialService
	
	| canAdd |
	
	canAdd := true.
	
	parents isEmpty ifTrue: [
			canAdd :=  canAdd and: [ self canAdd: aFinancialService ].
		] ifFalse: [
			parents do: []
		].
	
	canAdd ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:29:02' prior: 50557934!
add: aFinancialService
	
	| canAdd |

	parents isEmpty ifTrue: [
			canAdd :=  self canAdd: aFinancialService.
		] ifFalse: [
			canAdd := parents inject: true into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ].
		].
	
	canAdd ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 03:29:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 03:29:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 03:29:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 03:29:07'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:29:07'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/16/2022 03:30:07'!
test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount

	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	portfolio2 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/16/2022 03:31:29' prior: 50558010!
test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount

	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	portfolio2 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'test' stamp: 'SR 10/16/2022 03:31:53' prior: 50558025!
test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount

	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	portfolio3 add: account.
		
	self assert: 100 equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 03:32:54'!
PASSED!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 03:32:54'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 03:32:54'!
FAILURE!

----SNAPSHOT----(16 October 2022 03:33:13) CuisUniversity-5481.image priorSource: 7222714!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:42:33' prior: 50557843!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].

	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:42:39' prior: 50558116!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:43:12' prior: 50558136!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	parents isEmpty not ifTrue: [
			
		].
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:44:17' prior: 50558156!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 03:44:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 03:44:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 03:44:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 03:44:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:44:19'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'SR 10/16/2022 03:50:00'!
rootPortfolios

	| portfolios |
	
	parents isEmpty ifTrue: [ ^self ].
	
	portfolios := OrderedCollection new.
	
	parents do: [ :parent | portfolios add: (parent rootPortfolios) ].! !

col1 := OrderedCollection new.!

col2 := OrderedCollection new.!

col1 add: 1.!

col2 add: 2.!

col1!

col1 addAll: col2.!

col1!
!Portfolio methodsFor: 'private' stamp: 'SR 10/16/2022 03:54:28' prior: 50558219!
rootPortfolios

	| portfolios |
	
	parents isEmpty ifTrue: [ ^self ].
	
	portfolios := OrderedCollection new.
	
	parents do: [ :parent | portfolios addAll: (parent rootPortfolios) ].! !

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio1 add: portfolio2.!

portfolio2 add: portfolio3.!

portfolio3 add: account.!

portfolio3 rootPortfolios. !
!Portfolio methodsFor: 'private' stamp: 'SR 10/16/2022 03:57:08' prior: 50558232!
rootPortfolios

	| portfolios |
	
	parents isEmpty ifTrue: [ ^self ].
	
	portfolios := OrderedCollection new.
	
	parents do: [ :parentPortfolio | portfolios addAll: (parentPortfolio rootPortfolios) ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 03:57:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 03:57:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 03:57:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 03:57:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 03:57:17'!
PASSED!

portfolio3 rootPortfolios. !
!Portfolio methodsFor: 'private' stamp: 'SR 10/16/2022 03:58:38' prior: 50558251!
rootPortfolios

	| portfolios |
	
	parents isEmpty ifTrue: [ ^self ].
	
	portfolios := OrderedCollection new.
	
	parents do: [ :parentPortfolio | portfolios addAll: (parentPortfolio rootPortfolios) ].
	
	^portfolios! !

portfolio3 rootPortfolios. !

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio1 add: portfolio2.!

portfolio2 add: portfolio3.!

portfolio3 rootPortfolios. !

portfolio1 rootPortfolios .!

portfolio2 rootPortfolios. !

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio1 add: portfolio2.!

portfolio2 add: portfolio3.!

portfolio3 rootPortfolios. !

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

portfolio1 add: portfolio2.!

portfolio2 add: portfolio3.!

portfolio1 rootPortfolios.!

portfolio2 rootPortfolios. !
!Portfolio methodsFor: 'private' stamp: 'SR 10/16/2022 04:09:31' prior: 50558281!
rootPortfolios

	| portfolios |
	
	portfolios := OrderedCollection new.
	
	parents isEmpty ifTrue: [
			portfolios add: self
		] ifFalse: [
			parents do: [ :parentPortfolio | portfolios addAll: (parentPortfolio rootPortfolios) ]
		].
	
	^portfolios! !

portfolio1 rootPortfolios.!

portfolio1 rootPortfolios.!

portfolio2 rootPortfolios. !

portfolio3 root!

portfolio3 rootPortfolios. !

portfolio4 := Portfolio new.!

portfolio4 rootPortfolios.!

portfolio2 rootPortfolios.!

portfolio3 rootPortfolios.!

portfolio4 rootPortfolios.!

portfolio3 rootPortfolios size.!

portfolio2 rootPortfolios size. !

portfolio1 rootPortfolios size. !

portfolio4 rootPortfolios size. !

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

portfolio4 := Portfolio new.!

portfolio1 add: portfolio2.!

portfolio4 add: portfolio2.!

portfolio2 add: portfolio3.!

portfolio1 rootPortfolios size.!

portfolio2 rootPortfolios size.!

portfolio3 rootPortfolios size.!

portfolio4 rootPortfolios size.!

portfolio2 rootPortfolios.!

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

portfolio4 := Portfolio new.!

portfolio5 := Portfolio new.!

portfolio6 := Portfolio new.!

portfolio1 add: portfolio2 .!

portfolio4 add: portfolio2 .!

portfolio2 add: portfolio3 .!

portfolio2 add: portfolio5 .!

portfolio5 add: portfolio6 .!

portfolio3 add: portfolio6 .!

portfolio6 rootPortfolios size.!

portfolio6 rootPortfolios.!
!Portfolio methodsFor: 'private' stamp: 'SR 10/16/2022 04:15:56' prior: 50558318!
rootPortfolios

	| portfolios |
	
	portfolios := Set new.
	
	parents isEmpty ifTrue: [
			portfolios add: self
		] ifFalse: [
			parents do: [ :parentPortfolio | portfolios addAll: (parentPortfolio rootPortfolios) ]
		].
	
	^portfolios! !

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

portfolio4 := Portfolio new.!

portfolio5 := Portfolio new.!

portfolio6 := Portfolio new.!

portfolio1 add: portfolio2.!

portfolio4 add: portfolio2.!

portfolio2 add: portfolio5.!

portfolio2 add: portfolio3.!

portfolio5 add: portfolio6.!

portfolio3 add: portfolio6.!

portfolio6 rootPortfolios size.!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:21:49' prior: 50558177!
canAdd: aFinancialService
	
	| response rootPortfolios |
	
	rootPortfolios := self rootPortfolios.
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	rootPortfolios do: [ : aRootPortfolio |
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ aRootPortfolio canAdd: aService ].
					].
			] ifFalse: [
				financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	].
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:21:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:21:51'!
PASSED!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:21:51'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:21:51'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:22:00'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:22:00'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:22:03'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:22:04'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:22:05'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:22:06'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:22:09'!
PASSED!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:22:09'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:22:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:22:58' prior: 50558391!
canAdd: aFinancialService
	
	| response rootPortfolios |
	
	rootPortfolios := self rootPortfolios.
	"response := (self = aFinancialService) not."
	
	"probar double dispatch"
	rootPortfolios do: [ : aRootPortfolio |
		response := (aRootPortfolio = aFinancialService) not.
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ aRootPortfolio canAdd: aService ].
					].
			] ifFalse: [
				financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	].
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:23:00'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:23:01'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:23:01'!
PASSED!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:23:01'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:23:01'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:23:21' prior: 50558553!
canAdd: aFinancialService
	
	| response rootPortfolios |
	
	rootPortfolios := self rootPortfolios.
	"response := (self = aFinancialService) not."
	
	"probar double dispatch"
	rootPortfolios do: [ :aRootPortfolio |
		response := (aRootPortfolio = aFinancialService) not.
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ aRootPortfolio canAdd: aService ].
					].
			] ifFalse: [
				financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	].
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:23:32' prior: 50558637!
canAdd: aFinancialService
	
	| response rootPortfolios |
	
	rootPortfolios := self rootPortfolios.
	"response := (self = aFinancialService) not."
	
	"probar double dispatch"
	rootPortfolios do: [ :aRootPortfolio |
		response := (aRootPortfolio = aFinancialService) not.
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ aRootPortfolio canAdd: aService ].
					].
			] ifFalse: [
				aRootPortfolio financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	].
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:23:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:23:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:23:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:23:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:23:35'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:24:32' prior: 50558666!
canAdd: aFinancialService
	
	| response rootPortfolios |
	
	rootPortfolios := self rootPortfolios.
	"response := (self = aFinancialService) not."
	
	"probar double dispatch"
	rootPortfolios do: [ :aRootPortfolio |
		response := (aRootPortfolio = aFinancialService) not.
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ aRootPortfolio canAdd: aService ].
					].
			] ifFalse: [
				financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	].
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:24:40' prior: 50558715!
canAdd: aFinancialService
	
	| response rootPortfolios |
	
	rootPortfolios := self rootPortfolios.
	"response := (self = aFinancialService) not."
	
	"probar double dispatch"
	rootPortfolios do: [ :aRootPortfolio |
		response := (aRootPortfolio = aFinancialService) not.
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ self canAdd: aService ].
					].
			] ifFalse: [
				financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	].
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:24:56' prior: 50558744!
canAdd: aFinancialService
	
	| response rootPortfolios |
	
	rootPortfolios := self rootPortfolios.
	"response := (self = aFinancialService) not."
	
	"probar double dispatch"
		response := (self = aFinancialService) not.
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ self canAdd: aService ].
					].
			] ifFalse: [
				financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:25:00'!
PASSED!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:25:00'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:25:00'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:25:24' prior: 50558773!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
		response := (self = aFinancialService) not.
		(aFinancialService isKindOf: Portfolio) ifTrue: [
				aFinancialService financialServices do: [ :aService |
					response := response and: [ self canAdd: aService ].
					].
			] ifFalse: [
				financialServices do: [ :aService |
				response := response and: [
					(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
					].
				].
			].
	response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:25:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:25:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:25:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:25:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:25:26'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 03:44:17' prior: 50558855!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ].
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:26:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:26:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:26:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:26:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:26:08'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'SR 10/16/2022 04:26:28' prior: 50558368!
rootPortfolios

	| portfolios |
	
	portfolios := Set new.
	
	parents isEmpty ifTrue: [
			portfolios add: self.
		] ifFalse: [
			parents do: [ :parentPortfolio | portfolios addAll: (parentPortfolio rootPortfolios) ].
		].
	
	^portfolios! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:29:47' prior: 50557948!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:29:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:29:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:29:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:29:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:29:49'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:29:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:29:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:29:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:29:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:29:53'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:29:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:29:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:30:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:30:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:30:02'!
PASSED!

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

portfolio4 := Portfolio new.!

portfolio5 := Portfolio new.!

portfolio6 := Portfolio new.!

portfolio1 add: portfolio2.!

portfolio4 add: portfolio2.!

portfolio2 add: portfolio5.!

portfolio2 add: portfolio3.!

portfolio5 add: portfolio6.!

portfolio3 add: portfolio6.!

portfolio6 rootPortfolios size.!

portfolio6 rootPortfolios size.!

portfolio1 canAdd: portfolio6.!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:31:40' prior: 50558954!
add: aFinancialService
	
	"(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			]."! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:31:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:31:41'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:31:53' prior: 50559036!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			].! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:32:18' prior: 50559097!
add: aFinancialService
	
	"(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			]."
	^(self canAdd: aFinancialService)! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:32:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:32:20'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:32:49' prior: 50559107!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:32:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:32:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:32:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:32:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:32:53'!
PASSED!

----SNAPSHOT----(16 October 2022 04:33:03) CuisUniversity-5481.image priorSource: 7246790!

----STARTUP---- (16 October 2022 04:33:27) as D:\Carreras\Ciencias de la Computacion\Tercero\Ingenieria de Software 1\CuisUniversity\windows64\CuisUniversity-5481.image!


!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:33:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:33:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:33:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:33:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:33:29'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:33:53' prior: 50559169!
add: aFinancialService
	
	self canAdd: aFinancialService.
	"(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			]."! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:33:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:33:55'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:34:12' prior: 50559226!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [].
	"(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			]."! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:34:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:34:14'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:34:14'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:34:14'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:34:14'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:34:14'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:34:14'!
FAILURE!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:34:14'!
FAILURE!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:34:15'!
FAILURE!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:34:15'!
FAILURE!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:34:15'!
FAILURE!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:34:15'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:34:15'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:34:27' prior: 50559288!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [
		financialServices add: aFinancialService.
		].
	"(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			]."! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:34:29'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:34:29'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:34:29'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:34:59' prior: 50559351!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [
		financialServices add: aFinancialService.
		(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
		].
	"(self canAdd: aFinancialService) ifTrue: [
				financialServices add: aFinancialService.
				(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
			]."! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:35:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:35:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:35:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:35:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:35:01'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:35:10' prior: 50559415!
add: aFinancialService
	
	(self canAdd: aFinancialService) ifTrue: [
		financialServices add: aFinancialService.
		(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
		].! !

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:36:05'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:36:07'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:36:14'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:36:15'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:36:16'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:36:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:36:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:36:25'!
PASSED!

portfolio1 := Portfolio new.!

portfolio1 := Portfolio new.!

portfolio2 := Portfolio new.!

portfolio3 := Portfolio new.!

account := ReceptiveAccount  new.!

Deposit register: 100 on: account.!

portfolio1 add: account.!

portfolio1 add: portfolio2.!

portfolio2 add: portfolio3.!

portfolio3 add: account.!

portfolio3 canAdd: account.!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:39:13' prior: 50558900!
canAdd: aFinancialService
	
	| response |
	
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:39:15'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:39:16'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:39:16'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:39:16'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:39:16'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:39:16'!
FAILURE!

----SNAPSHOT----(16 October 2022 04:39:36) CuisUniversity-5481.image priorSource: 7281503!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:40:13'!
canRootsAdd: aFinancialService
	
	| roots response |
	
	roots := self rootPortfolios.
	response := (self = aFinancialService) not.
	
	"probar double dispatch"
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			aFinancialService financialServices do: [ :aService |
				response := response and: [ self canAdd: aService ].
				].
		] ifFalse: [
			financialServices do: [ :aService |
			response := response and: [
				(aService isKindOf: Portfolio) ifTrue: [ aService canAdd: aFinancialService ] ifFalse: [ (aService = aFinancialService) not ].
				].
			].
		].
	
	"response := parents inject: response into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ]."
	
	^response! !
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:41:59' prior: 50559579!
canRootsAdd: aFinancialService
	
	| roots canAdd |
	
	roots := self rootPortfolios.
	
	canAdd := roots inject: true into: [ :res :aPortfolio | res and: [ aPortfolio canAdd: aFinancialService ] ].
	
	^canAdd! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:42:27'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:42:27'!
FAILURE!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:42:27'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'SR 10/16/2022 04:42:48' prior: 50559450!
add: aFinancialService
	
	(self canRootsAdd: aFinancialService) ifTrue: [
		financialServices add: aFinancialService.
		(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService addParent: self ].
		].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountEqualsItsBalance stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithVariousAccountsEqualsTheSumOfItsBalances stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithVariousAccountsEqualsTheSumOfItsBalancesWhenSomeAreNegative stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithVariousPortfolioGivesCorrectBalance stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithPortfolioAndAccountGivesCorrectBalance stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test09CantAddAnAccountToAPortfolioThatHasAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test10CantAddAPortfolioToItself stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test11CantAddAPortfolioWithAnAccountToAPortfolioThatHasThatAccount stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test12CantAddAnAccountToAPortfolioInsideAPortfolioWithThatAccount stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

!testRun: #PortfolioTest #test13CantAddAnAccountToAPortfolioInsideAPortfolioTreeWithThatAccount stamp: 'SR 10/16/2022 04:42:49'!
PASSED!

----SNAPSHOT----(16 October 2022 04:43:05) CuisUniversity-5481.image priorSource: 7293619!